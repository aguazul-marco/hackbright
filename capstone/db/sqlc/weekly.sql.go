// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: weekly.sql

package db

import (
	"context"
	"database/sql"
)

const createWeeklyGoal = `-- name: CreateWeeklyGoal :one
INSERT INTO weekly_goals (
  discription,
  user_id
) VALUES (
  $1, $2
) RETURNING id, discription, completed, user_id, created_at
`

type CreateWeeklyGoalParams struct {
	Discription string        `json:"discription"`
	UserID      sql.NullInt32 `json:"user_id"`
}

func (q *Queries) CreateWeeklyGoal(ctx context.Context, arg CreateWeeklyGoalParams) (WeeklyGoal, error) {
	row := q.db.QueryRowContext(ctx, createWeeklyGoal, arg.Discription, arg.UserID)
	var i WeeklyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWeeklyGoal = `-- name: DeleteWeeklyGoal :exec
DELETE FROM weekly_goals
WHERE id = $1
`

func (q *Queries) DeleteWeeklyGoal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWeeklyGoal, id)
	return err
}

const getUserWeeklyGoal = `-- name: GetUserWeeklyGoal :one
SELECT id, discription, completed, user_id, created_at FROM weekly_goals
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserWeeklyGoal(ctx context.Context, userID sql.NullInt32) (WeeklyGoal, error) {
	row := q.db.QueryRowContext(ctx, getUserWeeklyGoal, userID)
	var i WeeklyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const weeklyCompleteStatusUpdate = `-- name: WeeklyCompleteStatusUpdate :one
UPDATE weekly_goals
SET completed = $2
WHERE id = $1
RETURNING id, discription, completed, user_id, created_at
`

type WeeklyCompleteStatusUpdateParams struct {
	ID        int64 `json:"id"`
	Completed bool  `json:"completed"`
}

func (q *Queries) WeeklyCompleteStatusUpdate(ctx context.Context, arg WeeklyCompleteStatusUpdateParams) (WeeklyGoal, error) {
	row := q.db.QueryRowContext(ctx, weeklyCompleteStatusUpdate, arg.ID, arg.Completed)
	var i WeeklyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const weeklyCompletedGoals = `-- name: WeeklyCompletedGoals :many
SELECT id, discription, completed, user_id, created_at FROM weekly_goals
WHERE user_id = $1 AND completed = true
ORDER BY created_at
`

func (q *Queries) WeeklyCompletedGoals(ctx context.Context, userID sql.NullInt32) ([]WeeklyGoal, error) {
	rows, err := q.db.QueryContext(ctx, weeklyCompletedGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeeklyGoal{}
	for rows.Next() {
		var i WeeklyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const weeklyUncompletedGoals = `-- name: WeeklyUncompletedGoals :many
SELECT id, discription, completed, user_id, created_at FROM weekly_goals
WHERE user_id = $1 AND completed = false
ORDER BY created_at
`

func (q *Queries) WeeklyUncompletedGoals(ctx context.Context, userID sql.NullInt32) ([]WeeklyGoal, error) {
	rows, err := q.db.QueryContext(ctx, weeklyUncompletedGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeeklyGoal{}
	for rows.Next() {
		var i WeeklyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const weeklyUserGoals = `-- name: WeeklyUserGoals :many
SELECT id, discription, completed, user_id, created_at FROM weekly_goals
WHERE user_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type WeeklyUserGoalsParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) WeeklyUserGoals(ctx context.Context, arg WeeklyUserGoalsParams) ([]WeeklyGoal, error) {
	rows, err := q.db.QueryContext(ctx, weeklyUserGoals, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeeklyGoal{}
	for rows.Next() {
		var i WeeklyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
