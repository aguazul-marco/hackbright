// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: daily.sql

package db

import (
	"context"
	"database/sql"
)

const createDailyGoal = `-- name: CreateDailyGoal :one
INSERT INTO daily_goals (
  discription,
  user_id
) VALUES (
  $1, $2
) RETURNING id, discription, completed, user_id, created_at
`

type CreateDailyGoalParams struct {
	Discription string        `json:"discription"`
	UserID      sql.NullInt32 `json:"user_id"`
}

func (q *Queries) CreateDailyGoal(ctx context.Context, arg CreateDailyGoalParams) (DailyGoal, error) {
	row := q.db.QueryRowContext(ctx, createDailyGoal, arg.Discription, arg.UserID)
	var i DailyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const dailyCompleteStatusUpdate = `-- name: DailyCompleteStatusUpdate :one
UPDATE daily_goals
SET completed = $2
WHERE id = $1
RETURNING id, discription, completed, user_id, created_at
`

type DailyCompleteStatusUpdateParams struct {
	ID        int64 `json:"id"`
	Completed bool  `json:"completed"`
}

func (q *Queries) DailyCompleteStatusUpdate(ctx context.Context, arg DailyCompleteStatusUpdateParams) (DailyGoal, error) {
	row := q.db.QueryRowContext(ctx, dailyCompleteStatusUpdate, arg.ID, arg.Completed)
	var i DailyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const dailyCompletedGoals = `-- name: DailyCompletedGoals :many
SELECT id, discription, completed, user_id, created_at FROM daily_goals
WHERE user_id = $1 AND completed = true
ORDER BY created_at
`

func (q *Queries) DailyCompletedGoals(ctx context.Context, userID sql.NullInt32) ([]DailyGoal, error) {
	rows, err := q.db.QueryContext(ctx, dailyCompletedGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DailyGoal{}
	for rows.Next() {
		var i DailyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dailyUncompletedGoals = `-- name: DailyUncompletedGoals :many
SELECT id, discription, completed, user_id, created_at FROM daily_goals
WHERE user_id = $1 AND completed = false
ORDER BY created_at
`

func (q *Queries) DailyUncompletedGoals(ctx context.Context, userID sql.NullInt32) ([]DailyGoal, error) {
	rows, err := q.db.QueryContext(ctx, dailyUncompletedGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DailyGoal{}
	for rows.Next() {
		var i DailyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dailyUserGoals = `-- name: DailyUserGoals :many
SELECT id, discription, completed, user_id, created_at FROM daily_goals
WHERE user_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type DailyUserGoalsParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) DailyUserGoals(ctx context.Context, arg DailyUserGoalsParams) ([]DailyGoal, error) {
	rows, err := q.db.QueryContext(ctx, dailyUserGoals, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DailyGoal{}
	for rows.Next() {
		var i DailyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteDailyGoal = `-- name: DeleteDailyGoal :exec
DELETE FROM daily_goals
WHERE id = $1
`

func (q *Queries) DeleteDailyGoal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDailyGoal, id)
	return err
}

const getUserDailyGoal = `-- name: GetUserDailyGoal :one
SELECT id, discription, completed, user_id, created_at FROM daily_goals
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserDailyGoal(ctx context.Context, userID sql.NullInt32) (DailyGoal, error) {
	row := q.db.QueryRowContext(ctx, getUserDailyGoal, userID)
	var i DailyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
