// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: monthly.sql

package db

import (
	"context"
	"database/sql"
)

const createMonthlyGoal = `-- name: CreateMonthlyGoal :one
INSERT INTO monthly_goals (
  discription,
  user_id
) VALUES (
  $1, $2
) RETURNING id, discription, completed, user_id, created_at
`

type CreateMonthlyGoalParams struct {
	Discription string        `json:"discription"`
	UserID      sql.NullInt32 `json:"user_id"`
}

func (q *Queries) CreateMonthlyGoal(ctx context.Context, arg CreateMonthlyGoalParams) (MonthlyGoal, error) {
	row := q.db.QueryRowContext(ctx, createMonthlyGoal, arg.Discription, arg.UserID)
	var i MonthlyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMonthlyGoal = `-- name: DeleteMonthlyGoal :exec
DELETE FROM monthly_goals
WHERE id = $1
`

func (q *Queries) DeleteMonthlyGoal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMonthlyGoal, id)
	return err
}

const getUserMonthlyGoal = `-- name: GetUserMonthlyGoal :one
SELECT id, discription, completed, user_id, created_at FROM monthly_goals
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserMonthlyGoal(ctx context.Context, userID sql.NullInt32) (MonthlyGoal, error) {
	row := q.db.QueryRowContext(ctx, getUserMonthlyGoal, userID)
	var i MonthlyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const monthlyCompleteStatusUpdate = `-- name: MonthlyCompleteStatusUpdate :one
UPDATE monthly_goals
SET completed = $2
WHERE id = $1
RETURNING id, discription, completed, user_id, created_at
`

type MonthlyCompleteStatusUpdateParams struct {
	ID        int64 `json:"id"`
	Completed bool  `json:"completed"`
}

func (q *Queries) MonthlyCompleteStatusUpdate(ctx context.Context, arg MonthlyCompleteStatusUpdateParams) (MonthlyGoal, error) {
	row := q.db.QueryRowContext(ctx, monthlyCompleteStatusUpdate, arg.ID, arg.Completed)
	var i MonthlyGoal
	err := row.Scan(
		&i.ID,
		&i.Discription,
		&i.Completed,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const monthlyUserGoals = `-- name: MonthlyUserGoals :many
SELECT id, discription, completed, user_id, created_at FROM monthly_goals
WHERE user_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type MonthlyUserGoalsParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) MonthlyUserGoals(ctx context.Context, arg MonthlyUserGoalsParams) ([]MonthlyGoal, error) {
	rows, err := q.db.QueryContext(ctx, monthlyUserGoals, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MonthlyGoal{}
	for rows.Next() {
		var i MonthlyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userMonthlyCompletedGoals = `-- name: UserMonthlyCompletedGoals :many
SELECT id, discription, completed, user_id, created_at FROM monthly_goals
WHERE user_id = $1 AND completed = true
ORDER BY created_at
`

func (q *Queries) UserMonthlyCompletedGoals(ctx context.Context, userID sql.NullInt32) ([]MonthlyGoal, error) {
	rows, err := q.db.QueryContext(ctx, userMonthlyCompletedGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MonthlyGoal{}
	for rows.Next() {
		var i MonthlyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userMonthlyUncompletedGoals = `-- name: UserMonthlyUncompletedGoals :many
SELECT id, discription, completed, user_id, created_at FROM monthly_goals
WHERE user_id = $1 AND completed = false
ORDER BY created_at
`

func (q *Queries) UserMonthlyUncompletedGoals(ctx context.Context, userID sql.NullInt32) ([]MonthlyGoal, error) {
	rows, err := q.db.QueryContext(ctx, userMonthlyUncompletedGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MonthlyGoal{}
	for rows.Next() {
		var i MonthlyGoal
		if err := rows.Scan(
			&i.ID,
			&i.Discription,
			&i.Completed,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
